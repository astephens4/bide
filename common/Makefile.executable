# Template for Makefiles, follow directions scattered throughout
# in the comments for the specific subdirectory

# This directory's location relative to the project root (do not end with '/')
RELATIVE=..

# This directory's name + parents inside of PROJECT_ROOT (ex. if this is ${PROJECT_ROOT}/libA/module1, then ME=libA/module1)
ME=

# This is the target to build for. Defaults to host, the name put in here depends on the name after makeinclude.<target>
ARCH=host

# location of makeinclude in the top-level source directory
include ${RELATIVE}/common/makeinclude.common
include ${RELATIVE}/common/makeinclude.${ARCH}

# Type of output being created
TYPE = bin

# Distinguishing name for the output.
TARGET =

# File name of the output.
OUTPUT = ${TARGET}


# List all sources files to be compiled with a C++ compiler here
CPP_SOURCES = \

# List all templates to perform a simple syntax check on here
TEMPLATES = \

# List all source files to be compiled with a C compiler here
C_SOURCES = \

# List all assembly sources files here with a .s extension
ASM_SOURCES = \

# List all directories where dependent headers are located
# Note: The compiler's system includes are already included, even when cross-compiling
INCLUDES = \
	${SYS_INCLUDES} \

# List all directories and library names where dependent libraries
# are located
LIBS = \
	${SYS_LIBS}

##########    If all variables above are correctly filled out,
##########    nothing below should have to be changed.

# Build out to basic temp dirs and the variables of the actual objects to build
TEMP_DIR=obj
CPP_OBJ_DIR=${TEMP_DIR}/cpp
CPP_LST_DIR=${TEMP_DIR}/cpp
C_OBJ_DIR=${TEMP_DIR}/c
ASM_OBJ_DIR=${TEMP_DIR}/asm

CPP_LSTS = ${TEMPLATES:%.hpp=${CPP_OBJ_DIR}/%.i}
CPP_OBJS = ${CPP_SOURCES:%.cpp=${CPP_OBJ_DIR}/%.o}
C_OBJS = ${C_SOURCES:%.c=${C_OBJ_DIR}/%.o}
ASM_OBJS = ${C_SOURCES:%.s=${C_OBJ_DIR}/%.o}

${TARGET}: ${C_OBJS} ${CPP_LSTS} ${CPP_OBJS} ${ASM_OBJS}
	@echo
	@echo Linking ${TARGET} ...
	${LINK} ${LDFLAGS} ${CXXFLAGS} -o ${OUTPUT} ${C_OBJS} ${CPP_OBJS} ${ASM_OBJS} ${LIBS}
	mkdir -p ${RELATIVE}/${ARCH}/${BUILD_VERSION}/${TYPE}
	${INSTALL} ${OUTPUT} ${RELATIVE}/${ARCH}/${BUILD_VERSION}/${TYPE}
	@echo

${CPP_OBJ_DIR}/%.o: %.cpp | tempdirs
	@echo
	@echo Compiling $< ... $@
	${CXX} -c ${CXXFLAGS} $< -o $@ ${INCLUDES}

${C_OBJ_DIR}/%.o: %.c | tempdirs
	@echo
	@echo Compiling $< ... $@
	${CC} -c ${CFLAGS} $< -o $@ ${INCLUDES}

${CPP_LST_DIR}/%.i: %.hpp | tempdirs
	@echo
	@echo Checking syntax of template $< ...
	${CXX} -c ${CXXFLAGS} $< -o $@ ${INCLUDES}

tempdirs:
	mkdir -p ${C_OBJ_DIR} ${CPP_OBJ_DIR} ${CPP_LST_DIR}

clean:
	@echo Cleaning up objects...
	rm -rf ${TEMP_DIR}
	@echo Removing temporary files and core dumps...
	rm -f *~ *core proj_files.txt .clang_complete

very_clean: clean
	@echo Removing ${TARGET}
	rm -f ${OUTPUT}

project_files:
	@echo ${ME}" (G)" > pf_tmp.txt
	@echo "\t"${CPP_SOURCES} | sed -e 's/\s*\([a-zA-Z0-9_\-\.]\+\)\s*/\t.\/\1\n/g' >> pf_tmp.txt
	@echo "\t"${C_SOURCES} | sed -e 's/\s*\([a-zA-Z0-9_\-\.]\+\)\s*/\t.\/\1\n/g' >> pf_tmp.txt
	@echo "\t"${ASM_SOURCES} | sed -e 's/\s*\([a-zA-Z0-9_\-\.]\+\)\s*/\t.\/\1\n/g' >> pf_tmp.txt
	@echo "\t"${TEMPLATES} | sed -e 's/\s*\([a-zA-Z0-9_\-\.]\+\)\s*/\t.\/\1\n/g' >> pf_tmp.txt
	@cat pf_tmp.txt | sed -e '/^\s*$$/d' > proj_files.txt
	@rm pf_tmp.txt
	@echo ${INCLUDES} | sed -e 's/\s\+-\([iI]\)/\n-\1/g' > .clang_complete
	@echo ${CXXFLAGS} | sed -e 's/\s\+/\n/g' >> .clang_complete
